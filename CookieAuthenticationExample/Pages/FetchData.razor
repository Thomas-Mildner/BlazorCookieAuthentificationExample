@page "/fetchdata"
@using CookieAuthenticationExample.Data

@using System.Security.Claims
@using CookieAuthenticationExample.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject WeatherForecastService ForecastService
@inject NavigationManager NavigationManager

@attribute [Authorize]

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button @onclick="Refresh">Refresh</button>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();
    private IEnumerable<string> userClaimRoles = Enumerable.Empty<string>();

    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            claims = user.Claims;
            userClaimRoles = user.Claims.Select(a => a.Value).ToList();
        }

        if (userClaimRoles.Contains("Administrator"))
        {
            //yayyy admin
        }
    }

    private Task Refresh()
    {
        NavigationManager.NavigateTo(NavigationPages.WeatherForecast, true);
        return Task.CompletedTask;
    }


    protected override async Task OnInitializedAsync()
    {
        //dummy call to simulate claim user role check
        await GetClaimsPrincipalData();

        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    }

}